<?php 
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: metrics.proto 
//   Date: 2015-06-23 17:43:33 


namespace io\prometheus\client {

            class MetricType extends \DrSlump\Protobuf\Enum
    {
                const COUNTER = 0;
                const GAUGE = 1;
                const SUMMARY = 2;
                const UNTYPED = 3;
                const HISTOGRAM = 4;
    }
}
 

namespace io\prometheus\client {

         
    class LabelPair extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.LabelPair');

                        // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional string value = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getName()
        {
                        return \PhpOption\Option::fromValue($this->name);
                    }

        /**
         * Set "name" value
         *
         * @param \string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \string $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Gauge extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Gauge');

                        // optional double value = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \float $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Counter extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Counter');

                        // optional double value = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \float $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Quantile extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Quantile');

                        // optional double quantile = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "quantile";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
                        // optional double value = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "quantile" has a value
         *
         * @return boolean
         */
        public function hasQuantile()
        {
            return isset($this->quantile);
        }

        /**
         * Clear "quantile" value
         */
        public function clearQuantile()
        {
            unset($this->quantile);
        }

        
        /**
         * Get "quantile" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getQuantile()
        {
                        return \PhpOption\Option::fromValue($this->quantile);
                    }

        /**
         * Set "quantile" value
         *
         * @param \float $value
         */
        public function setQuantile($value)
        {
            return $this->quantile = $value;
        }

        
                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \float $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Summary extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Summary');

                        // optional uint64 sample_count = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "sample_count";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
                        // optional double sample_sum = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "sample_sum";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
                        // repeated message quantile = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "quantile";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Quantile';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "sample_count" has a value
         *
         * @return boolean
         */
        public function hasSampleCount()
        {
            return isset($this->sample_count);
        }

        /**
         * Clear "sample_count" value
         */
        public function clearSampleCount()
        {
            unset($this->sample_count);
        }

        
        /**
         * Get "sample_count" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getSampleCount()
        {
                        return \PhpOption\Option::fromValue($this->sample_count);
                    }

        /**
         * Set "sample_count" value
         *
         * @param \int $value
         */
        public function setSampleCount($value)
        {
            return $this->sample_count = $value;
        }

        
                
        /**
         * Check if "sample_sum" has a value
         *
         * @return boolean
         */
        public function hasSampleSum()
        {
            return isset($this->sample_sum);
        }

        /**
         * Clear "sample_sum" value
         */
        public function clearSampleSum()
        {
            unset($this->sample_sum);
        }

        
        /**
         * Get "sample_sum" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getSampleSum()
        {
                        return \PhpOption\Option::fromValue($this->sample_sum);
                    }

        /**
         * Set "sample_sum" value
         *
         * @param \float $value
         */
        public function setSampleSum($value)
        {
            return $this->sample_sum = $value;
        }

        
                
        /**
         * Check if "quantile" has a value
         *
         * @return boolean
         */
        public function hasQuantile()
        {
            return isset($this->quantile);
        }

        /**
         * Clear "quantile" value
         */
        public function clearQuantile()
        {
            unset($this->quantile);
        }

        
        /**
         * Get "quantile" value
         *
         * @return \PhpOption\Option of type \io\prometheus\client\Quantile[]
         */
        public function getQuantile($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->quantile)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->quantile[$idx]);
        }

        /**
         * Get "quantile" list of values
         *
         * @return \io\prometheus\client\Quantile[]
         */
        public function getQuantileList()
        {
            return $this->quantile;
        }

        /**
         * @deprecated Use setQuantileList($value) instead
         * Set "quantile" value
         * @param \io\prometheus\client\Quantile[] $value
         */
        public function setQuantile($value)
        {
            return $this->quantile = $value;
        }

        /**
         * Set "quantile" list
         * @param \io\prometheus\client\Quantile[]|\Traversable $value
         */
         public function setQuantileList($value)
         {
             return $this->quantile = $value;
         }

        /**
         * Add a new element to "quantile"
         *
         * @param \io\prometheus\client\Quantile $value
         */
        public function addQuantile($value)
        {
            $this->quantile[] = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Untyped extends \DrSlump\Protobuf\Message {
                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Untyped');

                        // optional double value = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        
        /**
         * Get "value" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getValue()
        {
                        return \PhpOption\Option::fromValue($this->value);
                    }

        /**
         * Set "value" value
         *
         * @param \float $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Histogram extends \DrSlump\Protobuf\Message {
                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Histogram');

                        // optional uint64 sample_count = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "sample_count";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
                        // optional double sample_sum = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "sample_sum";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
                        // repeated message bucket = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Bucket';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "sample_count" has a value
         *
         * @return boolean
         */
        public function hasSampleCount()
        {
            return isset($this->sample_count);
        }

        /**
         * Clear "sample_count" value
         */
        public function clearSampleCount()
        {
            unset($this->sample_count);
        }

        
        /**
         * Get "sample_count" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getSampleCount()
        {
                        return \PhpOption\Option::fromValue($this->sample_count);
                    }

        /**
         * Set "sample_count" value
         *
         * @param \int $value
         */
        public function setSampleCount($value)
        {
            return $this->sample_count = $value;
        }

        
                
        /**
         * Check if "sample_sum" has a value
         *
         * @return boolean
         */
        public function hasSampleSum()
        {
            return isset($this->sample_sum);
        }

        /**
         * Clear "sample_sum" value
         */
        public function clearSampleSum()
        {
            unset($this->sample_sum);
        }

        
        /**
         * Get "sample_sum" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getSampleSum()
        {
                        return \PhpOption\Option::fromValue($this->sample_sum);
                    }

        /**
         * Set "sample_sum" value
         *
         * @param \float $value
         */
        public function setSampleSum($value)
        {
            return $this->sample_sum = $value;
        }

        
                
        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        
        /**
         * Get "bucket" value
         *
         * @return \PhpOption\Option of type \io\prometheus\client\Bucket[]
         */
        public function getBucket($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->bucket)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->bucket[$idx]);
        }

        /**
         * Get "bucket" list of values
         *
         * @return \io\prometheus\client\Bucket[]
         */
        public function getBucketList()
        {
            return $this->bucket;
        }

        /**
         * @deprecated Use setBucketList($value) instead
         * Set "bucket" value
         * @param \io\prometheus\client\Bucket[] $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Set "bucket" list
         * @param \io\prometheus\client\Bucket[]|\Traversable $value
         */
         public function setBucketList($value)
         {
             return $this->bucket = $value;
         }

        /**
         * Add a new element to "bucket"
         *
         * @param \io\prometheus\client\Bucket $value
         */
        public function addBucket($value)
        {
            $this->bucket[] = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Bucket extends \DrSlump\Protobuf\Message {
                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Bucket');

                        // optional uint64 cumulative_count = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "cumulative_count";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT64;

            $descriptor->addField($f);
                        // optional double upper_bound = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "upper_bound";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_DOUBLE;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "cumulative_count" has a value
         *
         * @return boolean
         */
        public function hasCumulativeCount()
        {
            return isset($this->cumulative_count);
        }

        /**
         * Clear "cumulative_count" value
         */
        public function clearCumulativeCount()
        {
            unset($this->cumulative_count);
        }

        
        /**
         * Get "cumulative_count" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getCumulativeCount()
        {
                        return \PhpOption\Option::fromValue($this->cumulative_count);
                    }

        /**
         * Set "cumulative_count" value
         *
         * @param \int $value
         */
        public function setCumulativeCount($value)
        {
            return $this->cumulative_count = $value;
        }

        
                
        /**
         * Check if "upper_bound" has a value
         *
         * @return boolean
         */
        public function hasUpperBound()
        {
            return isset($this->upper_bound);
        }

        /**
         * Clear "upper_bound" value
         */
        public function clearUpperBound()
        {
            unset($this->upper_bound);
        }

        
        /**
         * Get "upper_bound" value
                  * @return \PhpOption\Option of type (\float)
                  *
         *
         */
        public function getUpperBound()
        {
                        return \PhpOption\Option::fromValue($this->upper_bound);
                    }

        /**
         * Set "upper_bound" value
         *
         * @param \float $value
         */
        public function setUpperBound($value)
        {
            return $this->upper_bound = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class Metric extends \DrSlump\Protobuf\Message {
                                                                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.Metric');

                        // repeated message label = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "label";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\LabelPair';

            $descriptor->addField($f);
                        // optional message gauge = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "gauge";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Gauge';

            $descriptor->addField($f);
                        // optional message counter = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "counter";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Counter';

            $descriptor->addField($f);
                        // optional message summary = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "summary";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Summary';

            $descriptor->addField($f);
                        // optional message untyped = 5 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "untyped";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Untyped';

            $descriptor->addField($f);
                        // optional message histogram = 7 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "histogram";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Histogram';

            $descriptor->addField($f);
                        // optional int64 timestamp_ms = 6 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "timestamp_ms";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_INT64;

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "label" has a value
         *
         * @return boolean
         */
        public function hasLabel()
        {
            return isset($this->label);
        }

        /**
         * Clear "label" value
         */
        public function clearLabel()
        {
            unset($this->label);
        }

        
        /**
         * Get "label" value
         *
         * @return \PhpOption\Option of type \io\prometheus\client\LabelPair[]
         */
        public function getLabel($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->label)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->label[$idx]);
        }

        /**
         * Get "label" list of values
         *
         * @return \io\prometheus\client\LabelPair[]
         */
        public function getLabelList()
        {
            return $this->label;
        }

        /**
         * @deprecated Use setLabelList($value) instead
         * Set "label" value
         * @param \io\prometheus\client\LabelPair[] $value
         */
        public function setLabel($value)
        {
            return $this->label = $value;
        }

        /**
         * Set "label" list
         * @param \io\prometheus\client\LabelPair[]|\Traversable $value
         */
         public function setLabelList($value)
         {
             return $this->label = $value;
         }

        /**
         * Add a new element to "label"
         *
         * @param \io\prometheus\client\LabelPair $value
         */
        public function addLabel($value)
        {
            $this->label[] = $value;
        }

        
                
        /**
         * Check if "gauge" has a value
         *
         * @return boolean
         */
        public function hasGauge()
        {
            return isset($this->gauge);
        }

        /**
         * Clear "gauge" value
         */
        public function clearGauge()
        {
            unset($this->gauge);
        }

        
        /**
         * Get "gauge" value
                  * @return \PhpOption\Option of type (\io\prometheus\client\Gauge)
                  *
         *
         */
        public function getGauge()
        {
                        return \PhpOption\Option::fromValue($this->gauge);
                    }

        /**
         * Set "gauge" value
         *
         * @param \io\prometheus\client\Gauge $value
         */
        public function setGauge($value)
        {
            return $this->gauge = $value;
        }

        
                
        /**
         * Check if "counter" has a value
         *
         * @return boolean
         */
        public function hasCounter()
        {
            return isset($this->counter);
        }

        /**
         * Clear "counter" value
         */
        public function clearCounter()
        {
            unset($this->counter);
        }

        
        /**
         * Get "counter" value
                  * @return \PhpOption\Option of type (\io\prometheus\client\Counter)
                  *
         *
         */
        public function getCounter()
        {
                        return \PhpOption\Option::fromValue($this->counter);
                    }

        /**
         * Set "counter" value
         *
         * @param \io\prometheus\client\Counter $value
         */
        public function setCounter($value)
        {
            return $this->counter = $value;
        }

        
                
        /**
         * Check if "summary" has a value
         *
         * @return boolean
         */
        public function hasSummary()
        {
            return isset($this->summary);
        }

        /**
         * Clear "summary" value
         */
        public function clearSummary()
        {
            unset($this->summary);
        }

        
        /**
         * Get "summary" value
                  * @return \PhpOption\Option of type (\io\prometheus\client\Summary)
                  *
         *
         */
        public function getSummary()
        {
                        return \PhpOption\Option::fromValue($this->summary);
                    }

        /**
         * Set "summary" value
         *
         * @param \io\prometheus\client\Summary $value
         */
        public function setSummary($value)
        {
            return $this->summary = $value;
        }

        
                
        /**
         * Check if "untyped" has a value
         *
         * @return boolean
         */
        public function hasUntyped()
        {
            return isset($this->untyped);
        }

        /**
         * Clear "untyped" value
         */
        public function clearUntyped()
        {
            unset($this->untyped);
        }

        
        /**
         * Get "untyped" value
                  * @return \PhpOption\Option of type (\io\prometheus\client\Untyped)
                  *
         *
         */
        public function getUntyped()
        {
                        return \PhpOption\Option::fromValue($this->untyped);
                    }

        /**
         * Set "untyped" value
         *
         * @param \io\prometheus\client\Untyped $value
         */
        public function setUntyped($value)
        {
            return $this->untyped = $value;
        }

        
                
        /**
         * Check if "histogram" has a value
         *
         * @return boolean
         */
        public function hasHistogram()
        {
            return isset($this->histogram);
        }

        /**
         * Clear "histogram" value
         */
        public function clearHistogram()
        {
            unset($this->histogram);
        }

        
        /**
         * Get "histogram" value
                  * @return \PhpOption\Option of type (\io\prometheus\client\Histogram)
                  *
         *
         */
        public function getHistogram()
        {
                        return \PhpOption\Option::fromValue($this->histogram);
                    }

        /**
         * Set "histogram" value
         *
         * @param \io\prometheus\client\Histogram $value
         */
        public function setHistogram($value)
        {
            return $this->histogram = $value;
        }

        
                
        /**
         * Check if "timestamp_ms" has a value
         *
         * @return boolean
         */
        public function hasTimestampMs()
        {
            return isset($this->timestamp_ms);
        }

        /**
         * Clear "timestamp_ms" value
         */
        public function clearTimestampMs()
        {
            unset($this->timestamp_ms);
        }

        
        /**
         * Get "timestamp_ms" value
                  * @return \PhpOption\Option of type (\int)
                  *
         *
         */
        public function getTimestampMs()
        {
                        return \PhpOption\Option::fromValue($this->timestamp_ms);
                    }

        /**
         * Set "timestamp_ms" value
         *
         * @param \int $value
         */
        public function setTimestampMs($value)
        {
            return $this->timestamp_ms = $value;
        }
    }
}


namespace io\prometheus\client {

         
    class MetricFamily extends \DrSlump\Protobuf\Message {
                                                                             
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'io.prometheus.client.MetricFamily');

                        // optional string name = 1 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "name";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional string help = 2 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "help";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_STRING;

            $descriptor->addField($f);
                        // optional enum type = 3 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;
             
            $f->reference = '\io\prometheus\client\MetricType';

            $descriptor->addField($f);
                        // repeated message metric = 4 
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "metric";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;
             
            $f->reference = '\io\prometheus\client\Metric';

            $descriptor->addField($f);
            
            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }


                
        /**
         * Check if "name" has a value
         *
         * @return boolean
         */
        public function hasName()
        {
            return isset($this->name);
        }

        /**
         * Clear "name" value
         */
        public function clearName()
        {
            unset($this->name);
        }

        
        /**
         * Get "name" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getName()
        {
                        return \PhpOption\Option::fromValue($this->name);
                    }

        /**
         * Set "name" value
         *
         * @param \string $value
         */
        public function setName($value)
        {
            return $this->name = $value;
        }

        
                
        /**
         * Check if "help" has a value
         *
         * @return boolean
         */
        public function hasHelp()
        {
            return isset($this->help);
        }

        /**
         * Clear "help" value
         */
        public function clearHelp()
        {
            unset($this->help);
        }

        
        /**
         * Get "help" value
                  * @return \PhpOption\Option of type (\string)
                  *
         *
         */
        public function getHelp()
        {
                        return \PhpOption\Option::fromValue($this->help);
                    }

        /**
         * Set "help" value
         *
         * @param \string $value
         */
        public function setHelp($value)
        {
            return $this->help = $value;
        }

        
                
        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        
        /**
         * Get "type" value
                  * @return \PhpOption\Option of type (\int - io\prometheus\client\MetricType)
                  *
         *
         */
        public function getType()
        {
                        return \PhpOption\Option::fromValue($this->type);
                    }

        /**
         * Set "type" value
         *
         * @param \int - io\prometheus\client\MetricType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        
                
        /**
         * Check if "metric" has a value
         *
         * @return boolean
         */
        public function hasMetric()
        {
            return isset($this->metric);
        }

        /**
         * Clear "metric" value
         */
        public function clearMetric()
        {
            unset($this->metric);
        }

        
        /**
         * Get "metric" value
         *
         * @return \PhpOption\Option of type \io\prometheus\client\Metric[]
         */
        public function getMetric($idx = null)
        {
            if (NULL === $idx || !array_key_exists($idx, $this->metric)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->metric[$idx]);
        }

        /**
         * Get "metric" list of values
         *
         * @return \io\prometheus\client\Metric[]
         */
        public function getMetricList()
        {
            return $this->metric;
        }

        /**
         * @deprecated Use setMetricList($value) instead
         * Set "metric" value
         * @param \io\prometheus\client\Metric[] $value
         */
        public function setMetric($value)
        {
            return $this->metric = $value;
        }

        /**
         * Set "metric" list
         * @param \io\prometheus\client\Metric[]|\Traversable $value
         */
         public function setMetricList($value)
         {
             return $this->metric = $value;
         }

        /**
         * Add a new element to "metric"
         *
         * @param \io\prometheus\client\Metric $value
         */
        public function addMetric($value)
        {
            $this->metric[] = $value;
        }
    }
}


